# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v0qVcK0-SVNvnC4NY1PW3PU1fbLJLoaz
"""

!pip install easygui

import cv2 #for image processing
import easygui #to open the filebox
import numpy as np #to store image
import imageio #to read image stored at particular path
import sys
import matplotlib.pyplot as plt
import os
import tkinter as tk
from tkinter import filedialog
from tkinter import *
from PIL import ImageTk, Image

def upload():
    uploaded = files.upload()
    for fn in uploaded.keys():
        print('User uploaded file "{name}" with length {length} bytes'.format(
            name=fn, length=len(uploaded[fn])))
        cartoonify(fn)

def cartoonify(ImagePath):
    # Read the image
    original_image = cv2.imread(ImagePath)
    original_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)

    # Confirm that the image is chosen
    if original_image is None:
        print("Cannot find any image. Choose appropriate file")
        sys.exit()

    # Resize the image
    resized_image = cv2.resize(original_image, (960, 540))

    # Display the image (you can use plt.imshow() in Colab)
    plt.imshow(resized_image)
    plt.axis('off')  # Hide axis
    plt.show()

# Example usage
upload()

def upload():
    uploaded = files.upload()
    for fn in uploaded.keys():
        print('User uploaded file "{name}" with length {length} bytes'.format(
            name=fn, length=len(uploaded[fn])))
        cartoonify(fn)

def cartoonify(ImagePath):
    # Read the image
    original_image = cv2.imread(ImagePath)
    original_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)

    # Convert image to grayscale
    gray_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2GRAY)

    # Resize the grayscale image
    resized_image = cv2.resize(gray_image, (960, 540))

    # Display the grayscale image
    plt.imshow(resized_image, cmap='gray')
    plt.axis('off')  # Hide axis
    plt.show()

# Example usage
upload()

def upload():
    uploaded = files.upload()
    for fn in uploaded.keys():
        print('User uploaded file "{name}" with length {length} bytes'.format(
            name=fn, length=len(uploaded[fn])))
        cartoonify(fn)

def cartoonify(ImagePath):
    # Read the image
    original_image = cv2.imread(ImagePath)
    original_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)

    # Convert image to grayscale
    gray_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2GRAY)

    # Apply median blur to smoothen the image
    smooth_gray_image = cv2.medianBlur(gray_image, 5)

    # Resize the smoothed grayscale image
    resized_image = cv2.resize(smooth_gray_image, (960, 540))

    # Display the smoothed grayscale image
    plt.imshow(resized_image, cmap='gray')
    plt.axis('off')  # Hide axis
    plt.show()

# Example usage
upload()

def upload():
    uploaded = files.upload()
    for fn in uploaded.keys():
        print('User uploaded file "{name}" with length {length} bytes'.format(
            name=fn, length=len(uploaded[fn])))
        cartoonify(fn)

def cartoonify(ImagePath):
    # Read the image
    original_image = cv2.imread(ImagePath)
    original_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)

    # Convert image to grayscale
    gray_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2GRAY)

    # Apply median blur to smoothen the image
    smooth_gray_image = cv2.medianBlur(gray_image, 5)

    # Retrieve edges for cartoon effect using thresholding technique
    edge_image = cv2.adaptiveThreshold(smooth_gray_image, 255,
                                       cv2.ADAPTIVE_THRESH_MEAN_C,
                                       cv2.THRESH_BINARY, 9, 9)

    # Resize the edge image
    resized_image = cv2.resize(edge_image, (960, 540))

    # Display the edge image
    plt.imshow(resized_image, cmap='gray')
    plt.axis('off')  # Hide axis
    plt.show()

# Example usage
upload()

def upload():
    uploaded = files.upload()
    for fn in uploaded.keys():
        print('User uploaded file "{name}" with length {length} bytes'.format(
            name=fn, length=len(uploaded[fn])))
        cartoonify(fn)

def cartoonify(ImagePath):
    # Read the image
    original_image = cv2.imread(ImagePath)
    original_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)

    # Apply bilateral filter to remove noise and keep edge sharp
    color_image = cv2.bilateralFilter(original_image, 9, 300, 300)

    # Resize the color image
    resized_image = cv2.resize(color_image, (960, 540))

    # Display the color image
    plt.imshow(resized_image)
    plt.axis('off')  # Hide axis
    plt.show()

# Example usage
upload()

def upload():
    uploaded = files.upload()
    for fn in uploaded.keys():
        print('User uploaded file "{name}" with length {length} bytes'.format(
            name=fn, length=len(uploaded[fn])))
        cartoonify(fn)

def cartoonify(ImagePath):
    # Read the image
    original_image = cv2.imread(ImagePath)
    original_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)

    # Apply bilateral filter to remove noise and keep edge sharp
    color_image = cv2.bilateralFilter(original_image, 9, 300, 300)

    # Retrieve the edges for cartoon effect
    smooth_gray_scale = cv2.cvtColor(color_image, cv2.COLOR_BGR2GRAY)
    get_edge = cv2.adaptiveThreshold(smooth_gray_scale, 255,
                                     cv2.ADAPTIVE_THRESH_MEAN_C,
                                     cv2.THRESH_BINARY, 9, 9)

    # Mask the edged image with the "BEAUTIFY" image
    cartoon_image = cv2.bitwise_and(color_image, color_image, mask=get_edge)

    # Resize the cartoon image
    resized_image = cv2.resize(cartoon_image, (960, 540))

    # Display the cartoon image
    plt.imshow(resized_image)
    plt.axis('off')  # Hide axis
    plt.show()

# Example usage
upload()

import cv2
import numpy as np
import matplotlib.pyplot as plt

def cartoonify(ImagePath):
    # Read the image
    original_image = cv2.imread(ImagePath)
    original_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)

    # Convert the image to grayscale
    gray_scale_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2GRAY)

    # Apply median blur to smoothen the image
    smooth_gray_scale = cv2.medianBlur(gray_scale_image, 5)

    # Retrieve the edges for cartoon effect
    get_edge = cv2.adaptiveThreshold(smooth_gray_scale, 255,
                                     cv2.ADAPTIVE_THRESH_MEAN_C,
                                     cv2.THRESH_BINARY, 9, 9)

    # Apply bilateral filter to remove noise and keep edge sharp
    color_image = cv2.bilateralFilter(original_image, 9, 300, 300)

    # Mask the edged image with the "BEAUTIFY" image
    cartoon_image = cv2.bitwise_and(color_image, color_image, mask=get_edge)

    # Resize the images
    ReSized1 = cv2.resize(original_image, (960, 540))
    ReSized2 = cv2.resize(gray_scale_image, (960, 540))
    ReSized3 = cv2.resize(smooth_gray_scale, (960, 540))
    ReSized4 = cv2.resize(get_edge, (960, 540))
    ReSized5 = cv2.resize(color_image, (960, 540))
    ReSized6 = cv2.resize(cartoon_image, (960, 540))

    # Display the images using Matplotlib
    titles = ['Original Image', 'Grayscale Image', 'Smoothed Grayscale',
              'Edges', 'Color Image', 'Cartoon Image']
    images = [ReSized1, ReSized2, ReSized3, ReSized4, ReSized5, ReSized6]

    plt.figure(figsize=(15, 10))
    for i in range(6):
        plt.subplot(2, 3, i+1)
        plt.imshow(images[i], cmap='gray' if i==3 else 'jet')
        plt.title(titles[i])
        plt.axis('off')

    plt.show()

# Example usage
ImagePath = 'download.jpg'  # Replace 'download.jpg' with the path to your image file
cartoonify(ImagePath)

"""#converting an image to grayscale
grayScaleImage = cv2.cvtColor(originalmage, cv2.COLOR_BGR2GRAY)
ReSized2 = cv2.resize(grayScaleImage, (960, 540))
#plt.imshow(ReSized2, cmap='gray')
"""